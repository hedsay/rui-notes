(window.webpackJsonp=window.webpackJsonp||[]).push([[251],{577:function(s,t,a){"use strict";a.r(t);var e=a(4),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"执行频率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行频率"}},[s._v("#")]),s._v(" 执行频率")]),s._v(" "),t("p",[s._v("查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 7个_")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GLOBAL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("STATUS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Com_______'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 或者 ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SESSION")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("STATUS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Com_______'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h2",{attrs:{id:"慢日志查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#慢日志查询"}},[s._v("#")]),s._v(" 慢日志查询")]),s._v(" "),t("blockquote",[t("p",[s._v("慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。")])]),s._v(" "),t("p",[s._v("MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：")]),s._v(" "),t("div",{staticClass:"language-properties line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-properties"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开启慢查询日志开关")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("slow_query_log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("long_query_time")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("2")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log")]),s._v(" "),t("p",[s._v("查看慢查询日志开关状态："),t("code",[s._v("show variables like 'slow_query_log';")])]),s._v(" "),t("h2",{attrs:{id:"profile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#profile"}},[s._v("#")]),s._v(" profile")]),s._v(" "),t("p",[s._v("show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@have_profiling")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- profiling 默认关闭，可以通过set语句在session/global级别开启 profiling：")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" profiling "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("查看所有语句的耗时："),t("code",[s._v("show profiles;")]),s._v("\n查看指定query_id的SQL语句各个阶段的耗时："),t("code",[s._v("show profile for query query_id;")]),s._v("\n查看指定query_id的SQL语句CPU的使用情况："),t("code",[s._v("show profile cpu for query query_id;")])]),s._v(" "),t("h2",{attrs:{id:"explain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#explain"}},[s._v("#")]),s._v(" explain")]),s._v(" "),t("p",[s._v("EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序；")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 直接在select语句之前加上关键字 explain / desc")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" 字段列表 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名 HWERE 条件"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("各字段含义：")]),s._v(" "),t("ul",[t("li",[s._v("id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）")]),s._v(" "),t("li",[s._v("select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等")]),s._v(" "),t("li",[s._v("type：表示连接类型，性能由好到差的连接类型为 NULL、system、const(主键)、eq_ref、ref(非唯一索引)、range、index、all")]),s._v(" "),t("li",[s._v("possible_key：可能应用在这张表上的索引，一个或多个")]),s._v(" "),t("li",[s._v("Key：实际使用的索引，如果为 NULL，则没有使用索引")]),s._v(" "),t("li",[s._v("Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好")]),s._v(" "),t("li",[s._v("rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的")]),s._v(" "),t("li",[s._v("filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好")])]),s._v(" "),t("h2",{attrs:{id:"sql优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sql优化"}},[s._v("#")]),s._v(" sql优化")]),s._v(" "),t("h3",{attrs:{id:"大批量插入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#大批量插入"}},[s._v("#")]),s._v(" 大批量插入")]),s._v(" "),t("p",[s._v("如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）")]),s._v("\nmysql --local-infile "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-u")]),s._v(" root "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" global local_infile "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" @@local_infile"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行load指令将准备好的数据，加载到表结构中")]),s._v("\nload data "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v(" infile "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/root/sql1.log'")]),s._v(" into table "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'tb_user'")]),s._v(" fields terminated by "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("','")]),s._v(" lines terminated by "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\n'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"update优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#update优化"}},[s._v("#")]),s._v(" update优化")]),s._v(" "),t("p",[s._v("InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从"),t("strong",[s._v("行锁升级为表锁")]),s._v("；")]),s._v(" "),t("p",[s._v("如以下两条语句：\n"),t("code",[s._v("update student set no = '123' where id = 1;")]),s._v("，这句由于id有主键索引，所以只会锁这一行；\n"),t("code",[s._v("update student set no = '123' where name = 'test';")]),s._v("，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引；")]),s._v(" "),t("h3",{attrs:{id:"limit优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#limit优化"}},[s._v("#")]),s._v(" limit优化")]),s._v(" "),t("p",[s._v("常见的问题："),t("code",[s._v("limit 2000000, 10")]),s._v("，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。")]),s._v(" "),t("p",[t("strong",[s._v("优化方案")]),s._v("：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化；")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 此语句耗时很长")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" tb_sku "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9000000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("limit分页offset越深，性能越差！")]),s._v(" "),t("p",[s._v("mysql耗费大量随机IO在回表查询聚簇索引的数据上，而且这么多回表查询数据不会出现在结果集中；")])]),s._v(" "),t("p",[s._v("连表查询优化：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" tb_sku "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" tb_sku "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9000000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("在索引上拿到聚簇索引的主键ID，省去回表；")]),s._v(" "),t("p",[s._v("在需要查询的字段上创建覆盖索引，再叶子节点判断主键id是否相等，这样可以减少多次回表操作；")])]),s._v(" "),t("h3",{attrs:{id:"order-by优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#order-by优化"}},[s._v("#")]),s._v(" order by优化")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("Using filesort")]),s._v("：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序")]),s._v(" "),t("li",[t("strong",[s._v("Using index")]),s._v("：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高")])]),s._v(" "),t("blockquote",[t("p",[s._v("如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是"),t("code",[s._v("Using index, Using filesort")]),s._v("，如果要优化掉Using filesort，则需要另外再创建一个索引，如："),t("code",[s._v("create index idx_user_age_phone_ad on tb_user(age asc, phone desc);")])])]),s._v(" "),t("h3",{attrs:{id:"count优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#count优化"}},[s._v("#")]),s._v(" count优化")]),s._v(" "),t("p",[s._v("MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count("),t("em",[s._v(") 的时候会直接返回这个数，效率很高（前提是不适用where）；\nInnoDB 在执行 count(")]),s._v(") 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。\n"),t("strong",[s._v("优化方案")]),s._v("：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis；")]),s._v(" "),t("p",[s._v("各种用法的性能：")]),s._v(" "),t("ul",[t("li",[s._v("count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）")]),s._v(" "),t("li",[s._v("count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加")]),s._v(" "),t("li",[s._v("count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加")]),s._v(" "),t("li",[s._v("count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加")])]),s._v(" "),t("p",[s._v("按效率排序：count(字段) < count(主键) < count(1) < count(*)")]),s._v(" "),t("blockquote",[t("p",[s._v("count(1) 相比 count(主键字段) 少一个步骤，就是不需要读取记录中的字段值;")]),s._v(" "),t("p",[s._v("count(*) 其实等于 count(0)")])])])}),[],!1,null,null,null);t.default=n.exports}}]);