(window.webpackJsonp=window.webpackJsonp||[]).push([[253],{576:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"redisobject"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redisobject"}},[s._v("#")]),s._v(" RedisObject")]),s._v(" "),t("p",[s._v("一个Redis节点默认有16个database，每个database维护了从key到val的映射关系，这个关系由Dict维护，Dict的key可以是string类型的，而val可以是多种数据结构，为了在同一个Dict中存储不同类型结构的val，引进了RedisObject类型；")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("struct redisObject "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    unsigned type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    unsigned encoding"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//编码")]),s._v("\n    unsigned lru"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("LRU_BITS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" refcount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//引用计数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//指向底层数据结构实例")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h2",{attrs:{id:"数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[s._v("#")]),s._v(" 数据结构")]),s._v(" "),t("h3",{attrs:{id:"sds"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sds"}},[s._v("#")]),s._v(" SDS")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("__attribute__")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("__packed__"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("hisdshdr8")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint8_t")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* used */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint8_t")]),s._v(" alloc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* buf申请的总字节数，不包含结束标记 */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" flags"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 不同SDS的头类型，用来控制头大小 */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//上面为Header，尾部以/0结尾")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" buf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("比C语言的优势：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("获取字符串长度的时间复杂度为O(1)")])]),s._v(" "),t("li",[t("p",[s._v("支持动态扩容")]),s._v(" "),t("blockquote",[t("p",[s._v("如果新字符串小于1M，则新空间为扩展后字符串长度的两倍+1；")]),s._v(" "),t("p",[s._v("如果新字符串大于1M，则新空间为扩展后字符串长度+1M+1。称为"),t("strong",[s._v("内存预分配")]),s._v("。")])])]),s._v(" "),t("li",[t("p",[s._v("减少内存分配次数")]),s._v(" "),t("p",[s._v("SDS由于len属性和alloc属性存在，对修改字符串有内存预分配和惰性空间释放策略：")]),s._v(" "),t("ol",[t("li",[s._v("内存预分配：扩展的内存比实际需要的多，减少内存分配次数")]),s._v(" "),t("li",[s._v("惰性空间释放：不立即回收缩短后的多余字节，而是使用alloc属性将这些字节记录下来，等待后续使用")])]),s._v(" "),t("blockquote",[t("p",[s._v("C语言不记录字符串长度，如果修改字符串，必须重新分配内存(先释放再申请)，否则字符串长度 增加会内存缓冲区溢出，减小会内存泄露；")])])]),s._v(" "),t("li",[t("p",[s._v("二进制安全")]),s._v(" "),t("p",[s._v("SDS以len属性表示的长度来判断字符串是否结束；")])])]),s._v(" "),t("h3",{attrs:{id:"链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[s._v("#")]),s._v(" 链表")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("list")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//链表头节点")]),s._v("\n    listNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//链表尾节点")]),s._v("\n    listNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//节点值复制函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("dup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//节点值释放函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("free"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//节点值比较函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("match"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//链表节点数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://aurora-nr.oss-cn-beijing.aliyuncs.com/20240301160924.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"ziplist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ziplist"}},[s._v("#")]),s._v(" ZipList")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://aurora-nr.oss-cn-beijing.aliyuncs.com/1653985987327.png",alt:""}})]),s._v(" "),t("p",[s._v("压缩列表在表头有三个字段：")]),s._v(" "),t("ul",[t("li",[s._v("zlbytes，记录整个压缩列表占用对内存字节数；")]),s._v(" "),t("li",[s._v("zltail，记录压缩列表「尾部」节点距离起始地址由多少字节，也就是列表尾的偏移量；")]),s._v(" "),t("li",[s._v("zllen，记录压缩列表包含的节点entry数量；")]),s._v(" "),t("li",[s._v("entry，列表节点")]),s._v(" "),t("li",[s._v("zlend，标记压缩列表的结束点，固定值 0xFF（十进制255）。")])]),s._v(" "),t("p",[s._v("压缩列表节点entry包含三部分内容：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://aurora-nr.oss-cn-beijing.aliyuncs.com/20240301161011.png",alt:""}})]),s._v(" "),t("ul",[t("li",[t("p",[s._v("prevlen，记录了「前一个节点」的长度，目的是为了实现从后向前遍历；")]),s._v(" "),t("blockquote",[t("p",[s._v("压缩列表里的每个节点中的 prevlen 属性都记录了「前一个节点的长度」，而且 prevlen 属性的空间大小跟前一个节点长度值有关，比如：")]),s._v(" "),t("ul",[t("li",[s._v("如果"),t("strong",[s._v("前一个节点的长度小于 254 字节")]),s._v("，那么 prevlen 属性需要用 "),t("strong",[s._v("1 字节的空间")]),s._v("来保存这个长度值；")]),s._v(" "),t("li",[s._v("如果"),t("strong",[s._v("前一个节点的长度大于等于 254 字节")]),s._v("，那么 prevlen 属性需要用 "),t("strong",[s._v("5 字节的空间")]),s._v("来保存这个长度值；")])])])]),s._v(" "),t("li",[t("p",[s._v("encoding，记录了当前节点实际数据的「类型和长度」，类型主要有两种：字符串和整数。")]),s._v(" "),t("blockquote",[t("ul",[t("li",[s._v("如果"),t("strong",[s._v("当前节点的数据是整数")]),s._v("，则 encoding 会使用 "),t("strong",[s._v("1 字节的空间")]),s._v("进行编码，也就是 encoding 长度为 1 字节。通过 encoding 确认了整数类型，就可以确认整数数据的实际大小了，比如如果 encoding 编码确认了数据是 int16 整数，那么 data 的长度就是 int16 的大小。")]),s._v(" "),t("li",[s._v("如果"),t("strong",[s._v("当前节点的数据是字符串，根据字符串的长度大小")]),s._v("，encoding 会使用 "),t("strong",[s._v("1 字节/2字节/5字节的空间")]),s._v("进行编码，encoding 编码的前两个 bit 表示数据的类型，后续的其他 bit 标识字符串数据的实际长度，即 data 的长度。")])])])]),s._v(" "),t("li",[t("p",[s._v("data，记录了当前节点的实际数据，类型和长度都由 "),t("code",[s._v("encoding")]),s._v(" 决定；")])])]),s._v(" "),t("p",[t("strong",[s._v("连锁更新:")])]),s._v(" "),t("p",[s._v("特殊情况：假设一个压缩列表中有多个连续的、长度在 250～253 之间的节点，如果再将一个长度大于等于 254 字节的新节点加入到压缩列表的表头节点，后续节点全部更新。")]),s._v(" "),t("h3",{attrs:{id:"quicklist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#quicklist"}},[s._v("#")]),s._v(" quicklist")]),s._v(" "),t("blockquote",[t("p",[s._v("quicklist就是一个链表，每个元素是一个压缩列表；")])]),s._v(" "),t("p",[s._v("quicklist 就是「双向链表 + 压缩列表」组合，通过控制每个链表节点中的压缩列表的大小或者元素个数，来规避连锁更新的问题。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://aurora-nr.oss-cn-beijing.aliyuncs.com/20240301161858.png",alt:""}})]),s._v(" "),t("p",[s._v("在向quicklist中添加元素时，不会直接新建一个链表节点，会检查插入位置的压缩列表是否能容纳该元素，能则直接保存quicklistNode结构里的压缩列表，不能重新建一个quicklistNode结构；")]),s._v(" "),t("h3",{attrs:{id:"skiplist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#skiplist"}},[s._v("#")]),s._v(" SkipList")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplist")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("header"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" level"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" zskiplist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("blockquote",[t("p",[s._v("Redis 只有 Zset 对象的底层实现用到了跳表，跳表的优势是能支持平均 O(logN) 复杂度的节点查找；")]),s._v(" "),t("p",[s._v("Zset 对象要同时保存「元素」和「元素的权重」，对应到跳表节点结构里就是 sds 类型的 ele 变量和 double 类型的 score 变量。每个跳表节点都有一个后向指针（struct zskiplistNode *backward），指向前一个节点，目的是为了方便从跳表的尾节点开始访问节点，这样倒序查找时很方便。")])]),s._v(" "),t("p",[s._v("跳表时一个带层级关系的链表，层级关系由level数组表示，level数组中每个元素代表跳表的一层，每个元素的结构体中又定义了 指向下一个跳表节点的指针 和 跨度；")]),s._v(" "),t("p",[s._v("跳表查询过程会从头节点的最高层开始，逐一遍历每一层，遍历节点时会比较元素值和权重：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("当前节点权重 < 查找节点的权重时，跳表会访问该层上的下一个节点；")])]),s._v(" "),t("li",[t("p",[s._v("​                        =                                ，当前节点的元素值 < 要查找的元素值，跳表会访问该层上的下一个节点；")])]),s._v(" "),t("li",[t("p",[s._v("如果两个条件不满足，或下一个节点为空，跳表往下一层遍历；")])])]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    sds ele"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Zset 对象的元素值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//元素权重值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("backward"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//前一个节点指针")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//节点的level数组，保存每层上的前向指针和跨度")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistLevel")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("forward"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//后一个节点指针")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" span"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" level"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//多级索引数组")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" zskiplistNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("blockquote",[t("p",[s._v("跨度作用："),t("strong",[s._v("计算这个节点在跳表中的排位")]),s._v("；")])]),s._v(" "),t("p",[s._v("跳表查询过程：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://aurora-nr.oss-cn-beijing.aliyuncs.com/20230425114503.png",alt:""}})]),s._v(" "),t("p",[s._v("如果要查找「元素：abcd，权重：4」的节点，查找的过程是这样的：")]),s._v(" "),t("ul",[t("li",[s._v("先从头节点的最高层开始，L2 指向了「元素：abc，权重：3」节点，这个节点的权重比要查找节点的小，所以要访问该层上的下一个节点；")]),s._v(" "),t("li",[s._v("但是该层的下一个节点是空节点（ leve[2]指向的是空节点），于是就会跳到「元素：abc，权重：3」节点的下一层去找，也就是 leve[1];")]),s._v(" "),t("li",[s._v("「元素：abc，权重：3」节点的 leve[1] 的下一个指针指向了「元素：abcde，权重：4」的节点，然后将其和要查找的节点比较。虽然「元素：abcde，权重：4」的节点的权重和要查找的权重相同，但是当前节点的 SDS 类型数据「大于」要查找的数据，所以会继续跳到「元素：abc，权重：3」节点的下一层去找，也就是 leve[0]；")]),s._v(" "),t("li",[s._v("「元素：abc，权重：3」节点的 leve[0] 的下一个指针指向了「元素：abcd，权重：4」的节点，该节点正是要查找的节点，查询结束。")])]),s._v(" "),t("p",[s._v("如何添加元素？")]),s._v(" "),t("blockquote",[t("p",[s._v("随机层数：50% 的概率被分配到 Level 1，25% 的概率被分配到 Level 2，12.5% 的概率被分配到 Level 3，以此类推，Redis 跳跃表默认允许最大的层数是 32；")])]),s._v(" "),t("p",[s._v("为什么不用平衡树？")]),s._v(" "),t("blockquote",[t("p",[s._v("Redis是一种基于内存的数据结构。他其实不需要考虑磁盘IO的性能问题，所以，他完全可以选择一个简单的数据结构，并且性能也能接受的 ，那么跳表就很合适；")]),s._v(" "),t("p",[s._v("跳表相对于B+树来说，更简单。相比之下，B+树作为一种复杂的索引结构，需要考虑节点分裂和合并等复杂操作，增加了实现和维护的复杂度；")]),s._v(" "),t("p",[s._v("而且，Redis的有序集合经常需要进行插入、删除和更新操作。跳表在动态性能方面具有良好的表现，特别是在插入和删除操作上。相比之下，B+树的插入和删除需要考虑平衡性，所以还是成本挺高的；")])]),s._v(" "),t("h3",{attrs:{id:"dict"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dict"}},[s._v("#")]),s._v(" Dict")]),s._v(" "),t("blockquote",[t("p",[s._v("组成：字典（Dict）、哈希表（DictHashTable）、哈希节点（DictEntry）")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://aurora-nr.oss-cn-beijing.aliyuncs.com/1653985570612.png",alt:""}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://aurora-nr.oss-cn-beijing.aliyuncs.com/1653985640422.png",alt:""}})]),s._v(" "),t("blockquote",[t("p",[s._v("dictEntry:头插法")])]),s._v(" "),t("p",[t("strong",[s._v("哈希冲突")]),s._v("：链式哈希；")]),s._v(" "),t("p",[t("strong",[s._v("扩容时机")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("哈希表的 LoadFactor >= 1，并且服务器没有执行 BGSAVE 或者 BGREWRITEAOF 等后台进程；")]),s._v(" "),t("li",[s._v("哈希表的 LoadFactor > 5 ；")])]),s._v(" "),t("p",[t("strong",[s._v("rehash")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dict")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    …\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//两个Hash表，交替使用，用于rehash操作")]),s._v("\n    dictht ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    …\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("blockquote",[t("p",[s._v("dict结构体中，定义了两个哈希表；")]),s._v(" "),t("p",[s._v("rehash过程：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("给「哈希表 2」 分配空间，一般会比「哈希表 1」 大 2 倍；")]),s._v(" "),t("blockquote",[t("p",[s._v("如果是扩容，则新size为第一个大于等于dict.ht[0].used + 1的2^n")]),s._v(" "),t("p",[s._v("如果是收缩，则新size为第一个大于等于dict.ht[0].used的2^n （不得小于4）")])])]),s._v(" "),t("li",[t("p",[s._v("将「哈希表 1 」的数据迁移到「哈希表 2」 中；")])]),s._v(" "),t("li",[t("p",[s._v("迁移完成后，「哈希表 1 」的空间会被释放，并把「哈希表 2」 设置为「哈希表 1」，然后在「哈希表 2」 新创建一个空白的哈希表，为下次 rehash 做准备。")])])])]),s._v(" "),t("p",[t("strong",[s._v("渐进式rehash")]),s._v(":")]),s._v(" "),t("blockquote",[t("p",[s._v("rehash问题：如果「哈希表 1 」的数据量非常大，那么在迁移至「哈希表 2 」的时候，因为会涉及大量的数据拷贝，此时可能会对 Redis 造成阻塞，无法服务其他请求；")])]),s._v(" "),t("blockquote",[t("ul",[t("li",[s._v("查找一个 key 的值的话，先会在「哈希表 1」 里面进行查找，如果没找到，就会继续到哈希表 2 里面进行找到；")]),s._v(" "),t("li",[s._v("新增一个 key-value 时，会被保存到「哈希表 2 」里面，而「哈希表 1」 则不再进行任何添加操作，这样保证了「哈希表 1 」的 key-value 数量只会减少，随着 rehash 操作的完成，最终「哈希表 1 」就会变成空表；")])])]),s._v(" "),t("h2",{attrs:{id:"数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[s._v("#")]),s._v(" 数据类型")]),s._v(" "),t("h3",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" String")]),s._v(" "),t("p",[s._v("字符串对象的内部编码（encoding）有 3 种 ："),t("strong",[s._v("int、raw和 embstr")]),s._v(".")]),s._v(" "),t("ul",[t("li",[s._v("如果一个字符串对象保存的是整数值，并且这个整数值可以用"),t("code",[s._v("long")]),s._v("类型来表示，那么字符串对象会将整数值保存在字符串对象结构的"),t("code",[s._v("ptr")]),s._v("属性里面（将"),t("code",[s._v("void*")]),s._v("转换成 long），并将字符串对象的编码设置为"),t("code",[s._v("int")])]),s._v(" "),t("li",[s._v("如果字符串对象保存的是一个字符串，并且这个字符申的长度小于等于 32 字节（redis 2.+版本），那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串，并将对象的编码设置为"),t("code",[s._v("embstr")])]),s._v(" "),t("li",[s._v("如果字符串对象保存的是一个字符串，并且这个字符串的长度大于 32 字节（redis 2.+版本），那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串，并将对象的编码设置为"),t("code",[s._v("raw")])])]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("embstr")]),s._v("会通过一次内存分配函数来分配一块连续的内存空间来保存"),t("code",[s._v("redisObject")]),s._v("和"),t("code",[s._v("SDS")]),s._v("；")]),s._v(" "),t("p",[t("code",[s._v("raw")]),s._v("编码会通过调用两次内存分配函数来分别分配两块空间来保存"),t("code",[s._v("redisObject")]),s._v("和"),t("code",[s._v("SDS")]),s._v("；")])]),s._v(" "),t("h3",{attrs:{id:"list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[s._v("#")]),s._v(" List")]),s._v(" "),t("blockquote",[t("p",[s._v("Redis3.2版本之后，List 数据类型底层数据结构就只由 quicklist 实现；")])]),s._v(" "),t("p",[s._v("常用命令：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将一个或多个值value插入到key列表的表头(最左边)，最后的值在最前面")]),s._v("\nLPUSH key value "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将一个或多个值value插入到key列表的表尾(最右边)")]),s._v("\nRPUSH key value "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 移除并返回key列表的头元素")]),s._v("\nLPOP key     \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 移除并返回key列表的尾元素")]),s._v("\nRPOP key \n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回列表key中指定区间内的元素，区间以偏移量start和stop指定，从0开始")]),s._v("\nLRANGE key start stop\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从key列表表头弹出一个元素，没有就阻塞timeout秒，如果timeout=0则一直阻塞")]),s._v("\nBLPOP key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从key列表表尾弹出一个元素，没有就阻塞timeout秒，如果timeout=0则一直阻塞")]),s._v("\nBRPOP key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("h3",{attrs:{id:"hash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[s._v("#")]),s._v(" Hash")]),s._v(" "),t("blockquote",[t("p",[s._v("压缩列表或哈希表；")])]),s._v(" "),t("p",[s._v("与String区别：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://aurora-nr.oss-cn-beijing.aliyuncs.com/20240301145214.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[s._v("#")]),s._v(" Set")]),s._v(" "),t("blockquote",[t("p",[s._v("哈希表或整数集合；")])]),s._v(" "),t("p",[s._v("与List区别：")]),s._v(" "),t("ul",[t("li",[s._v("List可以存储重复元素，Set 只能存储非重复元素；")]),s._v(" "),t("li",[s._v("List 是按照元素的先后顺序存储元素的，而 Set 则是无序方式存储元素的；")])]),s._v(" "),t("p",[s._v("常用命令：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 往集合key中存入元素，元素存在则忽略，若key不存在则新建")]),s._v("\nSADD key member "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("member "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从集合key中删除元素")]),s._v("\nSREM key member "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("member "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取集合key中所有元素")]),s._v("\nSMEMBERS key\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取集合key中的元素个数")]),s._v("\nSCARD key\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 判断member元素是否存在于集合key中")]),s._v("\nSISMEMBER key member\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从集合key中随机选出count个元素，元素不从key中删除")]),s._v("\nSRANDMEMBER key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从集合key中随机选出count个元素，元素从key中删除")]),s._v("\nSPOP key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("运算操作：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 交集运算")]),s._v("\nSINTER key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将交集结果存入新集合destination中")]),s._v("\nSINTERSTORE destination key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 并集运算")]),s._v("\nSUNION key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将并集结果存入新集合destination中")]),s._v("\nSUNIONSTORE destination key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 差集运算")]),s._v("\nSDIFF key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将差集结果存入新集合destination中")]),s._v("\nSDIFFSTORE destination key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("应用场景：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("点赞；")]),s._v(" "),t("blockquote",[t("p",[s._v("一个用户只能点一个赞，key是文章id，val是用户id；")]),s._v(" "),t("p",[s._v("三个用户点赞：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# uid:1 用户对文章 article:1 点赞")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SADD article:1 uid:1\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# uid:2 用户对文章 article:1 点赞")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SADD article:1 uid:2\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# uid:3 用户对文章 article:1 点赞")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SADD article:1 uid:3\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])])])]),s._v(" "),t("li",[t("p",[s._v("共同关注；")]),s._v(" "),t("blockquote",[t("p",[s._v("key 是用户id，val是已关注的公众号id；")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# uid:1 用户关注公众号 id 为 5、6、7、8、9")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SADD uid:1 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# uid:2  用户关注公众号 id 为 7、8、9、10、11")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SADD uid:2 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SINTER uid:1 uid:2\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"7"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"8"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"9"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])])])])]),s._v(" "),t("h3",{attrs:{id:"zset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zset"}},[s._v("#")]),s._v(" Zset")]),s._v(" "),t("blockquote",[t("p",[s._v("跳表+哈希表；")]),s._v(" "),t("p",[s._v("Zset能支持范围查询（ZRANGEBYSCORE）：跳表；")]),s._v(" "),t("p",[s._v("能以常数复杂度获取元素权重（ZSCORE）：哈希表；")])]),s._v(" "),t("p",[s._v("每个存储元素相当于两个值组成，一个有序集合元素值，一个排序值；")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://aurora-nr.oss-cn-beijing.aliyuncs.com/20240301130313.png",alt:""}})]),s._v(" "),t("p",[s._v("常用操作：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 往有序集合key中加入带分值元素")]),s._v("\nZADD key score member "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("score member"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("   \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 往有序集合key中删除元素")]),s._v("\nZREM key member "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("member"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("                 \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回有序集合key中元素member的分值")]),s._v("\nZSCORE key member\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回有序集合key中元素个数")]),s._v("\nZCARD key \n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 为有序集合key中元素member的分值加上increment")]),s._v("\nZINCRBY key increment member \n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 正序获取有序集合key从start下标到stop下标的元素")]),s._v("\nZRANGE key start stop "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("WITHSCORES"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 倒序获取有序集合key从start下标到stop下标的元素")]),s._v("\nZREVRANGE key start stop "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("WITHSCORES"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回有序集合中指定分数区间内的成员，分数由低到高排序。")]),s._v("\nZRANGEBYSCORE key min max "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("WITHSCORES"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("LIMIT offset count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回指定成员区间内的成员，按字典正序排列, 分数必须相同。")]),s._v("\nZRANGEBYLEX key min max "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("LIMIT offset count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回指定成员区间内的成员，按字典倒序排列, 分数必须相同")]),s._v("\nZREVRANGEBYLEX key max min "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("LIMIT offset count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[s._v("应用场景：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("排行榜")])]),s._v(" "),t("li",[t("p",[s._v("延迟队列")]),s._v(" "),t("blockquote",[t("p",[s._v("将任务的执行时间戳作为score，任务作为value，将任务插入到zset中；")]),s._v(" "),t("p",[s._v("每个任务都有一个唯一的id，任务执行时间，任务内容（如订单超时支付系统自动取消）等信息体；")]),s._v(" "),t("p",[s._v("另启一个线程，周期性从zset中取出score最小（最早执行的）的任务，如果该任务的score小于当前时间戳，执行该任务，否则等待一段时间再次检查，任务执行后，删除已经执行成功的任务；")])]),s._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/7270464435298189324?searchId=20240301130359600B2BACDB9DD1621D5D",target:"_blank",rel:"noopener noreferrer"}},[s._v("项管让我用 Redis 实现延时队列，Excuse me？？ - 掘金 (juejin.cn)"),t("OutboundLink")],1)]),s._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/7334723606260236325?searchId=20240301130359600B2BACDB9DD1621D5D",target:"_blank",rel:"noopener noreferrer"}},[s._v("关于Redisson延迟队列的一些思考 - 掘金 (juejin.cn)"),t("OutboundLink")],1)]),s._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/7144969196542099469#heading-1",target:"_blank",rel:"noopener noreferrer"}},[s._v("基于 Redisson 和 Kafka 的延迟队列设计方案 - 掘金 (juejin.cn)"),t("OutboundLink")],1)])])]),s._v(" "),t("h3",{attrs:{id:"stream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stream"}},[s._v("#")]),s._v(" Stream")]),s._v(" "),t("p",[s._v("作为消息队列，List缺陷：")]),s._v(" "),t("ul",[t("li",[s._v("不能重复消费；")]),s._v(" "),t("li",[s._v("生产者子性实现全局唯一ID；")]),s._v(" "),t("li",[s._v("消费失败后，消息丢失；")])]),s._v(" "),t("p",[s._v("Stream优势：")]),s._v(" "),t("ul",[t("li",[s._v("支持消息的持久化；")]),s._v(" "),t("li",[s._v("支持自动生成全局唯一ID；")]),s._v(" "),t("li",[s._v("支持ACK确认消息；")]),s._v(" "),t("li",[s._v("支持消费者组模式；")])]),s._v(" "),t("p",[s._v("常见命令：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# XADD：插入消息，保证有序，可以自动生成全局唯一 ID；")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" XADD mymq * name Nreal\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1654254953808-0"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# XLEN ：查询消息长度；")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# XREAD：用于读取消息，可以按 ID 读取数据；")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从 ID 号为 1654254953807-0 的消息开始，读取后续的所有消息（示例中一共 1 条）。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" XREAD STREAMS mymq "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1654254953807")]),s._v("-0\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mymq"')]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1654254953808-0"')]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Nreal"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# XDEL ： 根据消息 ID 删除消息；")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# DEL ：删除整个 Stream；")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# XRANGE ：读取区间消息")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# XREADGROUP：按消费组形式读取消息；")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建一个名为 group1 的消费组，0-0 表示从第一条消息开始读取。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" XGROUP CREATE mymq group1 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("-0\nOK\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# XPENDING 和 XACK：")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     XPENDING 命令可以用来查询每个消费组内所有消费者「已读取、但尚未确认」的消息；")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     XACK 命令用于向消息队列确认消息处理已完成；")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v("作为消息队列特征：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("消息有序；")])]),s._v(" "),t("li",[t("p",[s._v("消息不重；")]),s._v(" "),t("blockquote",[t("p",[s._v("Stream在使用XADD命令，自动生成全局唯一ID；")])])]),s._v(" "),t("li",[t("p",[s._v("消息可靠性；")]),s._v(" "),t("blockquote",[t("p",[s._v("内部使用 PENDING List 自动保存消息，使用 XPENDING 命令查看消费组已经读取但是未被确认的消息，消费者使用 XACK 确认消息；")])])]),s._v(" "),t("li",[t("p",[s._v("消息不丢；")]),s._v(" "),t("blockquote",[t("p",[t("img",{attrs:{src:"https://aurora-nr.oss-cn-beijing.aliyuncs.com/20240301150919.png",alt:""}})]),s._v(" "),t("ul",[t("li",[t("p",[s._v("生产者—中间件：生产者收到中间件的ACK确认，表示发送成功；")])]),s._v(" "),t("li",[t("p",[s._v("中间件—消费者：PENDING List保存消费者组未被确认的消息，消费者重启后用 XPENDING 命令查看已读取、但尚未确认处理完成的消息。等到消费者执行完业务逻辑后，再发送消费确认 XACK 命令，也能保证消息的不丢失；")])]),s._v(" "),t("li",[t("p",[s._v("中间件：会丢失")]),s._v(" "),t("ol",[t("li",[s._v("AOF 持久化配置为每秒写盘，但这个写盘过程是异步的，Redis 宕机时会存在数据丢失的可能；")]),s._v(" "),t("li",[s._v("主从复制也是异步的，主从切换时，也存在丢失数据的可能；")])])])])])]),s._v(" "),t("li",[t("p",[s._v("可堆积；")]),s._v(" "),t("blockquote",[t("p",[s._v("Stream 在消息积压时，如果指定了最大长度，有可能丢失消息的；")])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);